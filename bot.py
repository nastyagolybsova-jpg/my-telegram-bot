import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
import aiohttp
import json

BOT_TOKEN = "8253385719:AAEJuuHrGG1fRu0yy_1uPEwRUWbeDTmzM5Y"
GIGACHAT_API_KEY = "OGYwMGUzZTYtMGRiZi00NzU2LWEwZmQtN2FlMmMxZjUzMTkyOmIwMjA0ZGJkLWRlZmMtNDA2Zi1iODI0LTVhNzQ5Y2Y3NWE1MA=="

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

user_states = {}
user_requests = {}

def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π")],
            [KeyboardButton(text="üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π")],
            [KeyboardButton(text="üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤")]
        ],
        resize_keyboard=True
    )

def rating_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="accept")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="redo")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

async def ask_gigachat(prompt, previous_response=None, feedback=None):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {GIGACHAT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    messages = [{"role": "user", "content": prompt}]
    
    if previous_response and feedback:
        messages.extend([
            {"role": "assistant", "content": previous_response},
            {"role": "user", "content": f"–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {feedback}. –ü–µ—Ä–µ–¥–µ–ª–∞–π —Å —É—á–µ—Ç–æ–º —ç—Ç–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π:"}
        ])
    
    data = {
        "model": "GigaChat",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 1000
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data, ssl=False) as response:
                result = await response.json()
                return result['choices'][0]['message']['content']
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {str(e)}"

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π")
async def ideas_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_idea_description"
    
    await message.answer(
        "üí° –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–∏–µ –∏–¥–µ–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –ò–¥–µ–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚Ä¢ –ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n‚Ä¢ –ò–¥–µ–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@dp.message(F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def process_idea_request(message: types.Message):
    user_id = message.from_user.id
    
    if user_states.get(user_id) == "waiting_idea_description":
        user_states[user_id] = "processing"
        
        processing_msg = await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...")
        
        prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3-5 –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message.text}. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        ai_response = await ask_gigachat(prompt)
        
        user_requests[user_id] = {
            "original_request": message.text,
            "ai_response": ai_response
        }
        
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        
        await message.answer(
            f"üí° –í–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–¥–µ–∏:\n\n{ai_response}\n\n–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=rating_keyboard()
        )

@dp.callback_query(F.data == "accept")
async def accept_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –∏–¥–µ–∏ –ø–æ–¥–æ—à–ª–∏!\n\n–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=None
    )
    await callback.answer()

@dp.callback_query(F.data == "redo")
async def redo_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = "waiting_feedback"
    
    await callback.message.edit_text(
        "üîÑ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–¥–µ—è—Ö?\n–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=None
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def process_feedback(message: types.Message):
    user_id = message.from_user.id
    
    if user_states.get(user_id) == "waiting_feedback":
        user_data = user_requests.get(user_id, {})
        
        processing_msg = await message.answer("üîÑ –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞—é —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π...")
        
        new_response = await ask_gigachat(
            user_data["original_request"],
            user_data["ai_response"],
            message.text
        )
        
        user_requests[user_id]["ai_response"] = new_response
        
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        
        await message.answer(
            f"üîÑ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–¥–µ–∏:\n\n{new_response}\n\n–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—É—á—à–µ?",
            reply_markup=rating_keyboard()
        )

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())